{"version":3,"sources":["services/api.js","pages/login/LoginPage.js","pages/dashboard/DashboardPage.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["api","axios","create","baseURL","headers","token","localStorage","userid","user_id","login","data","a","post","randomAll","get","randomCreate","LoginPage","history","useHistory","useState","loginError","setLoginError","errorMessage","setErrorMessage","response","isAuthenticated","push","setTimeout","message","className","onSubmit","reset","name","type","placeholder","DashboardPage","randoms","setRandoms","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","error","useEffect","fetchRandoms","onClick","map","item","key","id","parseInt","average","Routes","exact","path","PrivateRoute","children","rest","render","location","to","pathname","configure","App","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.2061aeae.chunk.js","sourcesContent":["import axios from \"axios\"\n\nexport const api = axios.create({\n  baseURL: \"https://codechallenge-vutiliti-backend.herokuapp.com/\",\n  headers: {\n    \"content-type\": \"application/json\",\n    token: localStorage.token,\n    userid: localStorage.user_id\n  }\n})\n\nexport const login = async data => {\n  return await api.post(\"auth\", data)\n}\n\nexport const randomAll = async () => {\n  return await api.get(\"random\")\n}\n\nexport const randomCreate = async data => {\n  return await api.post(\"random\", data)\n}\n","import React, { useState } from \"react\"\nimport { Form, Input } from \"ninti\"\nimport { login } from \"../../services/api\"\nimport { useHistory } from \"react-router-dom\"\n\nimport \"./styles.scss\"\n\nexport default function LoginPage() {\n  const history = useHistory()\n  const [loginError, setLoginError] = useState(false)\n  const [errorMessage, setErrorMessage] = useState(\"\")\n\n  async function handleSubmit(data) {\n    try {\n      const response = await login(data)\n      localStorage.isAuthenticated = true\n      localStorage.token = response.data.token\n      localStorage.user_id = response.data.user_id\n      history.push(\"/dashboard\")\n    } catch (err) {\n      setLoginError(true)\n      setTimeout(() => {\n        setLoginError(false)\n      }, 2000)\n      setErrorMessage(err.response.data.message)\n    }\n  }\n\n  return (\n    <div className=\"LoginPage\">\n      <div className=\"background\"></div>\n      <div className=\"form\">\n        <div className=\"login\">\n          <h1>Welcome</h1>\n          <Form onSubmit={handleSubmit} reset={true}>\n            <Input name=\"username\" type=\"text\" placeholder=\"username\" />\n            <Input name=\"password\" type=\"password\" placeholder=\"password\" />\n            <button>Enter</button>\n          </Form>\n\n          {loginError ? (\n            <div className=\"handle-error\">{errorMessage}</div>\n          ) : (\n            <></>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React, { useState, useEffect } from \"react\"\nimport { toast } from \"react-toastify\"\nimport \"react-toastify/dist/ReactToastify.css\"\n\nimport { useHistory } from \"react-router-dom\"\nimport { randomAll, randomCreate } from \"../../services/api\"\nimport { Form, Input } from \"ninti\"\n\nimport \"./styles.scss\"\ntoast.configure()\n\nexport default function DashboardPage() {\n  const history = useHistory()\n  const [randoms, setRandoms] = useState([])\n\n  useEffect(() => {\n    async function fetchRandoms() {\n      const response = await randomAll()\n      setRandoms(response.data)\n    }\n\n    fetchRandoms()\n  }, [])\n\n  function logout() {\n    delete localStorage.token\n    delete localStorage.isAuthenticated\n    delete localStorage.user_id\n    history.push(\"/login\")\n  }\n\n  async function handleCreateTime(data) {\n    try {\n      const response = await randomCreate(data)\n\n      toast.success(response.data.message, {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true\n      })\n    } catch (err) {\n      toast.error(\"Something went wrong!\", {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true\n      })\n    }\n  }\n\n  return (\n    <div className=\"DashboardPage\">\n      <div className=\"header\">\n        <span>Vutiliti Code Challenge</span>\n        <div className=\"logout\">\n          <button onClick={() => logout()}>logout</button>\n        </div>\n      </div>\n\n      <div className=\"container\">\n        <div className=\"create-timer-container\">\n          <h1>Create timer</h1>\n          <Form onSubmit={handleCreateTime} reset={true}>\n            <span>Start:</span>\n            <Input name=\"start\" type=\"datetime-local\" />\n            <span>End:</span>\n            <Input name=\"end\" type=\"datetime-local\" />\n            <button>create timer</button>\n          </Form>\n        </div>\n        <div className=\"list-randoms\">\n          <h1>Randoms</h1>\n          <div className=\"list-randoms__list\">\n            {randoms?.map(item => (\n              <div className=\"list__item\" key={item.id}>\n                <div className=\"list__item-average\">\n                  <span>{parseInt(item.average) | \"-\"}</span>\n                </div>\n                <div className=\"list__item-description\">average</div>\n                <div className=\"list__item-id\">\n                  <span>ID: {item.id}</span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React from \"react\"\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\"\nimport LoginPage from \"./pages/login/LoginPage\"\nimport DashboardPage from \"./pages/dashboard/DashboardPage\"\n\nexport default function Routes() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <LoginPage />\n        </Route>\n        <Route exact path=\"/login\">\n          <LoginPage />\n        </Route>\n        <PrivateRoute path=\"/dashboard\">\n          <DashboardPage />\n        </PrivateRoute>\n      </Switch>\n    </Router>\n  )\n}\n\nfunction PrivateRoute({ children, ...rest }) {\n  return (\n    <Route\n      {...rest}\n      render={({ location }) =>\n        localStorage.isAuthenticated ? (\n          children\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/login\"\n            }}\n          />\n        )\n      }\n    />\n  )\n}\n","import React from \"react\"\nimport Routes from \"./routes\"\nimport \"./styles.scss\"\nfunction App() {\n  return <Routes />\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}